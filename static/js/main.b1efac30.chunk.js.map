{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserContext.tsx","api/users.ts","components/UserSelector.tsx","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","posts","activePostID","setActivePost","className","map","post","id","title","type","classNames","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","getComments","postID","Loader","NewCommentForm","onSubmit","useState","isSubmit","setIsSubmit","name","email","value","setValue","isError","setIsError","handleSubmit","event","a","preventDefault","current","handleChange","target","fieldValue","fieldName","nameError","emailError","bodyError","htmlFor","placeholder","onChange","PostDetails","comments","setComments","isLoad","setIsLoad","isErrorDelete","setIsErrorDelete","isErrorAdding","setIsErrorAdding","isShowForm","setIsShowForm","loadComments","deleteComment","commentID","filter","comment","e","addNewComment","commentData","postId","newComment","useEffect","length","href","UserContext","React","createContext","UserProvider","children","users","setUsers","Provider","UserSelector","activeUser","setActiceUser","useContext","isOpenDropdown","setIsOpenDropdown","handlePageClick","document","addEventListener","removeEventListener","role","user","getPosts","userID","App","setPosts","selectedPost","setSelectedPost","selectedUser","setSelectedUser","loadPosts","postsFromServer","noPosts","thereArePosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b1efac30.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  activePostID: number | undefined;\n  setActivePost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  activePostID = 0,\n  setActivePost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          posts.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': post.id !== activePostID,\n                  })}\n                  onClick={\n                    () => setActivePost(post?.id === activePostID ? null : post)\n                  }\n                >\n                  {post.id !== activePostID ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postID: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postID}`);\n};\n\nexport const addComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const removeComment = (comentID: number) => {\n  return client.delete(`/comments/${comentID}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onSubmit: (data: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmit }) => {\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [value, setValue] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const [isError, setIsError] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const clearForm = () => {\n    setIsError({\n      name: false,\n      email: false,\n      body: false,\n    });\n\n    setValue({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!value.name || !value.email || !value.body) {\n      setIsError({\n        name: !value.name,\n        email: !value.email,\n        body: !value.body,\n      });\n\n      setIsSubmit(false);\n    } else {\n      setIsSubmit(true);\n      await onSubmit(value);\n      await setValue(current => ({ ...current, body: '' }));\n      setIsSubmit(false);\n    }\n  };\n\n  const handleChange\n  = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setIsError({\n      name: false,\n      email: false,\n      body: false,\n    });\n\n    setValue(current => {\n      const { value: fieldValue, name: fieldName } = event.target;\n\n      return {\n        ...current,\n        [fieldName]: fieldValue,\n      };\n    });\n  };\n\n  const {\n    name: nameError,\n    email: emailError,\n    body: bodyError,\n  } = isError;\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': nameError })}\n            value={value.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          { nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        { nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': emailError })}\n            value={value.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': bodyError })}\n            value={value.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        { bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmit,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { getComments, removeComment, addComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const {\n    id,\n    title,\n    body,\n  } = post;\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoad, setIsLoad] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorDelete, setIsErrorDelete] = useState(false);\n  const [isErrorAdding, setIsErrorAdding] = useState(false);\n  const [isShowForm, setIsShowForm] = useState(false);\n\n  const loadComments = async (postID: number) => {\n    setIsLoad(false);\n    setIsShowForm(false);\n    try {\n      await getComments(postID)\n        .then(data => setComments(data));\n    } catch (e) {\n      setIsError(true);\n    }\n\n    setIsLoad(true);\n  };\n\n  const deleteComment = async (commentID: number) => {\n    try {\n      setComments(current => {\n        return current.filter(comment => comment.id !== commentID);\n      });\n      removeComment(commentID);\n\n      if (isErrorDelete) {\n        setIsErrorDelete(false);\n      }\n    } catch (e) {\n      setIsErrorDelete(true);\n    }\n  };\n\n  const addNewComment = async (commentData: CommentData) => {\n    setIsLoad(false);\n    try {\n      const newComment = await addComment({\n        postId: id,\n        name: commentData.name,\n        email: commentData.email,\n        body: commentData.body,\n      });\n\n      await setComments(current => [...current, newComment]);\n\n      if (isErrorAdding) {\n        setIsErrorAdding(false);\n      }\n    } catch (error) {\n      setIsErrorAdding(true);\n    } finally {\n      setIsLoad(true);\n    }\n  };\n\n  useEffect(() => {\n    loadComments(post.id);\n  }, [post.id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          { !isLoad && (<Loader />) }\n\n          { isLoad && isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          { isLoad && !isError && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isLoad && !isError && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              { isErrorDelete && (\n                <div className=\"notification is-danger\">\n                  Error with deleting comments!\n                </div>\n              )}\n\n              { comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isShowForm && isLoad && !isError && ( // TODO\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsShowForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n        { isShowForm && (\n          <NewCommentForm onSubmit={addNewComment} />\n        )}\n\n        { isErrorAdding && (\n          <div className=\"notification is-danger\">\n            Error with adding comments!\n          </div>\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\nexport const UserContext = React.createContext<User[]>([]);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UserProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  return (\n    <UserContext.Provider value={users}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState, useEffect } from 'react';\nimport { User } from '../types/User';\nimport { UserContext } from './UserContext';\n\ntype Props = {\n  activeUser: User | null;\n  setActiceUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  activeUser,\n  setActiceUser,\n}) => {\n  const users = useContext(UserContext);\n  const [isOpenDropdown, setIsOpenDropdown] = useState(false);\n\n  useEffect(() => {\n    const handlePageClick = () => {\n      if (isOpenDropdown) {\n        setIsOpenDropdown(false);\n      }\n    };\n\n    document.addEventListener('click', handlePageClick);\n\n    return () => {\n      document.removeEventListener('click', handlePageClick);\n    };\n  }, [isOpenDropdown]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isOpenDropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpenDropdown(!isOpenDropdown)}\n        >\n          <span>{ activeUser?.name || 'Choose a user' }</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {\n            users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-#${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === activeUser?.id,\n                })}\n                onClick={() => setActiceUser(user)}\n              >\n                {user.name}\n              </a>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userID: number) => {\n  return client.get<Post[]>(`/posts?userId=${userID}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoad, setIsLoad] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const loadPosts = async (userID: number) => {\n    setIsLoad(false);\n    try {\n      const postsFromServer = await getPosts(userID);\n\n      setPosts(postsFromServer);\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoad(true);\n    }\n  };\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      loadPosts(selectedUser.id);\n    } else {\n      setPosts([]);\n    }\n  }, [selectedUser?.id]);\n\n  const noPosts = selectedUser && isLoad && !isError && posts.length === 0;\n  const thereArePosts = selectedUser && isLoad && !isError && posts.length > 0;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  activeUser={selectedUser}\n                  setActiceUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                { selectedUser && !isLoad && (<Loader />) }\n\n                { selectedUser && isLoad && isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                ) }\n\n                {thereArePosts && (\n                  <PostsList\n                    posts={posts}\n                    activePostID={selectedPost?.id}\n                    setActivePost={setSelectedPost}\n                  />\n                ) }\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UserProvider } from './components/UserContext';\n\nReactDOM.render(\n  <UserProvider>\n    <App />\n  </UserProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}